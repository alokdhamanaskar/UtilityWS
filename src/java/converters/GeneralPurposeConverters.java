
package converters;

import java.util.logging.Logger;
import java.util.logging.Level;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import static java.lang.System.out;

/**
 * @author Alok Dhamanaskar (alokd@uga.edu)
 * @see LICENSE (MIT style license file). 
 * 
 * <br/><br/> The class implements methods supported by the GeneralPurposeConverters Web service,
 * deployed using Axis
 *
 */
public class GeneralPurposeConverters { 

    private static final Logger log  = Logger.getLogger(GeneralPurposeConverters.class.getName());
    
    /**
     * Decodes a base64encoded String to string
     * 
     * @param base64 encoded string
     * @return 
     */
    public static String decode(String base64)
    {
        
        String output;
        BASE64Decoder decode = new BASE64Decoder();
        try 
        {
            byte[] decoded = decode.decodeBuffer(base64);
            output = new String(decoded);
        }//try
        catch (Exception e)
        {
            log.log(Level.SEVERE, "An exception occurred while decoding : " + e + "\n On input " + base64);
            output = "An error occured when processing the request.!";
        }//catch
        
        return output;
    }//decode

    /**
     * Encodes a String to a base64encoded String
     * 
     * @param input String
     * @return base64encoded String
     */
    public static String encode(String input)
    {
        String encoded;
        BASE64Encoder encode = new BASE64Encoder();
        try 
        {
            encoded = encode.encode(input.getBytes());
        }//try
        catch (Exception e)
        {
            log.log(Level.SEVERE, "An exception occurred while encoding : " + e + "\n On input " + input);
            encoded = "An error occured when processing the request.!";
        }//catch
        
        return encoded;
    }//encode
    
    /**
     * Converts an array of String to comma separated values
     * @param Array of Strings
     * @return CSV Strings
     */
    public static String arraytoCSV(String[] arrayofString)
    {
        String csv = "";
        for (String s : arrayofString)
            csv += s + ",";
        
        csv = csv.substring(0, csv.length()-2);
        return csv;
    }//arraytoCSV

    /**
     * Converts Comma Separated Values, to an array of Strings
     * @param csv
     * @return 
     */    
    public static String[] csvtoArray(String csv)
    {
        return csv.split(",");
    }//csvtoArray

    
    public static void main(String[] args)
    {
        //Test code
        
        //out.println(arraytoCSV(new String[]{"aa","bbb","ccc"}));
        String[] arr = csvtoArray("a,s,w,s,hy,j,f,d,sd,hy,k,");
        
        String encoded = "";
        out.println(decode(encoded));
  
        out.println("\n\n"+ encode(decode(encoded)));
        
        out.println("\n\n"+ decode(encode(decode(encoded))));
    
    }//main

}

